//design by Chinmoyee
//we are creating a custom Tab Bar component as no option in TabNavigator
//importing content to build
import React,{Component} from 'react';
//importing a tabHeader custom component which customise tabHeader
import TabHeader from '../../components/TabHeader';

import {StyleSheet, Platform, Text, TouchableNativeFeedBack, View, ScrollView, Animated } from 'react-native';
//Understanding Each Component in notes1
//importing componentss from native base
import {  Content,Header,Left,Body,Icon, Image,Right,Button,Title} from 'native-base';

//creating custom tabbar component
//its purpose is to show seperate Headers for the tabs
//based on tab selected
//using a class compoenent to use lifecycle
class TabBarComponent extends Component{

//renders the header based on tab selected
renders(){
  const {
   navigation,
   renderIcon,
   activeTintColor,
   inactiveTintColor,
   jumpToIndex
   } = this.props;
   const {routes} = navigation.state;//returns state
   //https://camjackson.net/post/9-things-every-reactjs-beginner-should-know

   //now we check for state and update Header
  // let allows you to declare variables that are limited to block,statement or expression
  //on which it is used.
  //unlike var which craetes a global variables
  let header =null;
  let currentIndex=navigation.state.index;
  let currentKey=navigation.state.routes[currentIndex].key;
  header=<TabHeader navigation={navigation} tabKey = {currentKey} />;

  return (

    <View>


     {/* show the header as initialized by tab pressing */}
     {header}


    <View style={styles.tabbar}>
        {/* Maps through all the routes and shows the tabs for each route as mentioned in the tab navigator */}
        {routes && routes.map((route, index) => {
          const focused = index === navigation.state.index;
          const tintColor = focused ? activeTintColor : inactiveTintColor;
         const tabKey = route.key;

          return (

            // show buttons for tabs
            <TouchableNativeFeedback
              key={route.key}
              style={styles.tab}

              // on pressing of tabs route to that screen and also update state when search tab pressed
              onPress={()=>{jumpToIndex(index); }}
              background={Platform.OS === 'android' ? TouchableNativeFeedback.SelectableBackground() : ''}>
              {/* show the tabbaricon */}
              <View style={styles.tab}>
                {renderIcon({
                  route,
                  index,
                  focused,
                  tintColor
                })}
              </View>
            </TouchableNativeFeedback>
          );
        })}

      </View>

       </View>
    )
}
};

const styles = StyleSheet.create({
    tabbar: {
      height: 45,
      flexDirection: 'row',
      borderBottomWidth: 1,
      borderBottomColor: 'blue',
      backgroundColor: 'white',
    },
    tab: {
      alignSelf: 'stretch',
      flex: 1,
      alignItems: 'center',
      justifyContent: 'center',

    },
    // icon:
    // {
    //   tintColor:'blue',
    //     width: 26,
    //     height: 26
    // }
  });

  export default TabBarComponent;

//   return(
//     <View>
//     //shows header as initialized by ab pressing
//     {header}
//     //maps through all routes and shows tab for each row as mentioned in tab navigation
//
//     <View style={styles.tabbar}>
//     {routes && routes.map((route, index) => {
//       const focused = index === navigation.state.index;
//       const tintColor =focused ? activeTintColor : inactiveTintColor;
//       const tabKey = route.key;
//
//       return (
//         //show Buttons for tabs
//         <TouchableNativeFeedBack
//         key={route.key}
//         style={styles.tab}
//
//         //on pressing of tabs to that screen and also update statement
//         //when search tab pressed
//         onPress={() => {jumpToIndex(index);}}
//         background={Platform.OS === 'android' ? TouchableNativeFeedBack.SelectableBackground() : ''} >
//         //for showing tabbaricon
//         <View style={styles.tab}>
//         {renderIcon({
//           route,
//           index,
//           focused,
//           tintColor
//         })}
//         </View>
//         </TouchableNativeFeedBack>
//       );
// })}
// </View>
// </View>
// )
// }
// };
//
// //a styles object for a StyleSheet
// const styles = StyleSheet.create({
//     tabbar: {
//       height: 45,
//       flexDirection: 'row',
//       borderBottomWidth: 1,
//       borderBottomColor: 'blue',
//       backgroundColor: 'white',
//     },
//     tab: {
//       alignSelf: 'stretch',
//       flex: 1,
//       alignItems: 'center',
//       justifyContent: 'center',
//
//     },
//
//   });
//
//   export default TabBarComponent;
